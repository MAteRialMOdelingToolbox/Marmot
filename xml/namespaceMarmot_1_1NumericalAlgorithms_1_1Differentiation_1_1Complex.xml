<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex" kind="namespace" language="C++">
    <compoundname>Marmot::NumericalAlgorithms::Differentiation::Complex</compoundname>
    <innernamespace refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1_1ScalarToTensor">Marmot::NumericalAlgorithms::Differentiation::Complex::ScalarToTensor</innernamespace>
    <innernamespace refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1_1TensorToScalar">Marmot::NumericalAlgorithms::Differentiation::Complex::TensorToScalar</innernamespace>
    <innernamespace refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1_1TensorToTensor">Marmot::NumericalAlgorithms::Differentiation::Complex::TensorToTensor</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a4a90e6de8284baeb8274c9ef1da60865" prot="public" static="no">
        <type>std::function&lt; <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a28c6239f908d27d61a4fb860643e54a4" kindref="member">complexDouble</ref>(const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a28c6239f908d27d61a4fb860643e54a4" kindref="member">complexDouble</ref> x) &gt;</type>
        <definition>using Marmot::NumericalAlgorithms::Differentiation::Complex::scalar_to_scalar_function_type =  std::function&lt; complexDouble( const complexDouble x ) &gt;</definition>
        <argsstring></argsstring>
        <name>scalar_to_scalar_function_type</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::scalar_to_scalar_function_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" line="51" column="7" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" prot="public" static="no">
        <type>std::function&lt; Eigen::VectorXcd(const Eigen::VectorXcd &amp;X) &gt;</type>
        <definition>using Marmot::NumericalAlgorithms::Differentiation::Complex::vector_to_vector_function_type =  std::function&lt; Eigen::VectorXcd( const Eigen::VectorXcd&amp; X ) &gt;</definition>
        <argsstring></argsstring>
        <name>vector_to_vector_function_type</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::vector_to_vector_function_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" line="52" column="7" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a28c6239f908d27d61a4fb860643e54a4" prot="public" static="no">
        <type>std::complex&lt; double &gt;</type>
        <definition>using Marmot::NumericalAlgorithms::Differentiation::Complex::complexDouble =  std::complex&lt; double &gt;</definition>
        <argsstring></argsstring>
        <name>complexDouble</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::complexDouble</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" line="225" column="7" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ab209696084acc4914c384a05bc9412a8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>std::function&lt; std::complex&lt; double &gt;( const Fastor::Tensor&lt; std::complex&lt; double &gt;, dim, dim &gt; &amp;T) &gt;</type>
        <definition>using Marmot::NumericalAlgorithms::Differentiation::Complex::tensor_to_scalar_function_type =  std::function&lt; std::complex&lt; double &gt;(
        const Fastor::Tensor&lt; std::complex&lt; double &gt;, dim, dim &gt;&amp; T ) &gt;</definition>
        <argsstring></argsstring>
        <name>tensor_to_scalar_function_type</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::tensor_to_scalar_function_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" line="230" column="7" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" bodystart="230" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae67392e859d5c18f0943f1b74c12e71c" prot="public" static="yes" mutable="no">
        <type>const std::complex&lt; double &gt;</type>
        <definition>const std::complex&lt; double &gt; Marmot::NumericalAlgorithms::Differentiation::Complex::imaginaryUnit</definition>
        <argsstring></argsstring>
        <name>imaginaryUnit</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::imaginaryUnit</qualifiedname>
        <initializer>= { 0, 1 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" line="47" column="33" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a6404fc111180740f6b006d16f9ba7615" prot="public" static="yes" mutable="no">
        <type>const std::complex&lt; double &gt;</type>
        <definition>const std::complex&lt; double &gt; Marmot::NumericalAlgorithms::Differentiation::Complex::complexUnit</definition>
        <argsstring></argsstring>
        <name>complexUnit</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::complexUnit</qualifiedname>
        <initializer>= { 1, 1 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" line="48" column="33" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae0c370efd89ca4bad97eaa994f36036c" prot="public" static="yes" mutable="no">
        <type>const std::complex&lt; double &gt;</type>
        <definition>const std::complex&lt; double &gt; Marmot::NumericalAlgorithms::Differentiation::Complex::i_</definition>
        <argsstring></argsstring>
        <name>i_</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::i_</qualifiedname>
        <initializer>= <ref refid="namespaceMarmot_1_1Constants_1a33698d788303a9dd40c1489cdfba6aa7" kindref="member">Marmot::Constants::sqrt2</ref> / 2. * <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a6404fc111180740f6b006d16f9ba7615" kindref="member">complexUnit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" line="49" column="33" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a6141fcf2345cd23bfba16145a51b183b" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double Marmot::NumericalAlgorithms::Differentiation::Complex::imaginaryPerturbationSize</definition>
        <argsstring></argsstring>
        <name>imaginaryPerturbationSize</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::imaginaryPerturbationSize</qualifiedname>
        <initializer>= 1e-20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" line="226" column="34" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a8eef6e1db32666b0bfd40472454844f9" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a28c6239f908d27d61a4fb860643e54a4" kindref="member">complexDouble</ref></type>
        <definition>const complexDouble Marmot::NumericalAlgorithms::Differentiation::Complex::imaginaryPerturbation</definition>
        <argsstring></argsstring>
        <name>imaginaryPerturbation</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::imaginaryPerturbation</qualifiedname>
        <initializer>= <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a6141fcf2345cd23bfba16145a51b183b" kindref="member">imaginaryPerturbationSize</ref> * <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae67392e859d5c18f0943f1b74c12e71c" kindref="member">imaginaryUnit</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" line="227" column="34" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" bodystart="227" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a5ee4f2bd6a00a7f61d3670ef77fbbc4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Marmot::NumericalAlgorithms::Differentiation::Complex::forwardDifference</definition>
        <argsstring>(const scalar_to_scalar_function_type &amp;f, const double x)</argsstring>
        <name>forwardDifference</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::forwardDifference</qualifiedname>
        <param>
          <type>const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a4a90e6de8284baeb8274c9ef1da60865" kindref="member">scalar_to_scalar_function_type</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp" line="84" column="14" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp" bodystart="84" bodyend="89" declfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" declline="54" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a2c5dd9bde01d03a58662eb2f06c70e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; Eigen::VectorXd, Eigen::MatrixXd &gt;</type>
        <definition>std::tuple&lt; Eigen::VectorXd, Eigen::MatrixXd &gt; Marmot::NumericalAlgorithms::Differentiation::Complex::forwardDifference</definition>
        <argsstring>(const vector_to_vector_function_type &amp;F, const Eigen::VectorXd &amp;X)</argsstring>
        <name>forwardDifference</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::forwardDifference</qualifiedname>
        <param>
          <type>const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" kindref="member">vector_to_vector_function_type</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" line="56" column="18" declfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" declline="56" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1aa36a3313864346a2aeacde16bdaca2ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd Marmot::NumericalAlgorithms::Differentiation::Complex::centralDifference</definition>
        <argsstring>(const vector_to_vector_function_type &amp;F, const Eigen::VectorXd &amp;X)</argsstring>
        <name>centralDifference</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::centralDifference</qualifiedname>
        <param>
          <type>const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" kindref="member">vector_to_vector_function_type</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" line="59" column="23" declfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" declline="59" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a1d374430c01a8b167504cc715f1997ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd Marmot::NumericalAlgorithms::Differentiation::Complex::fourthOrderAccurateDerivative</definition>
        <argsstring>(const vector_to_vector_function_type &amp;F, const Eigen::VectorXd &amp;X)</argsstring>
        <name>fourthOrderAccurateDerivative</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::fourthOrderAccurateDerivative</qualifiedname>
        <param>
          <type>const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" kindref="member">vector_to_vector_function_type</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" line="61" column="23" declfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" declline="61" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a3f484b0d6ac480c257cc9add6aaf9746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>Fastor::Tensor&lt; double, dim, dim &gt;</type>
        <definition>Fastor::Tensor&lt; double, dim, dim &gt; Marmot::NumericalAlgorithms::Differentiation::Complex::forwardDifference</definition>
        <argsstring>(const tensor_to_scalar_function_type&lt; dim &gt; &amp;F, const Fastor::Tensor&lt; double, dim, dim &gt; &amp;T)</argsstring>
        <name>forwardDifference</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::forwardDifference</qualifiedname>
        <param>
          <type>const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ab209696084acc4914c384a05bc9412a8" kindref="member">tensor_to_scalar_function_type</ref>&lt; dim &gt; &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>const Fastor::Tensor&lt; double, dim, dim &gt; &amp;</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" line="234" column="22" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiationForFastor.h" bodystart="234" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a03540cdc3bbe34fdf10131372bcd8bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; VectorXd, MatrixXd &gt;</type>
        <definition>std::tuple&lt; VectorXd, MatrixXd &gt; Marmot::NumericalAlgorithms::Differentiation::Complex::forwardDifference</definition>
        <argsstring>(const vector_to_vector_function_type &amp;F, const VectorXd &amp;X)</argsstring>
        <name>forwardDifference</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::forwardDifference</qualifiedname>
        <param>
          <type>const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" kindref="member">vector_to_vector_function_type</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>const VectorXd &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp" line="91" column="18" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp" bodystart="91" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a1449232e465c0645b363bbc459a406d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXd</type>
        <definition>MatrixXd Marmot::NumericalAlgorithms::Differentiation::Complex::centralDifference</definition>
        <argsstring>(const vector_to_vector_function_type &amp;F, const VectorXd &amp;X)</argsstring>
        <name>centralDifference</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::centralDifference</qualifiedname>
        <param>
          <type>const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" kindref="member">vector_to_vector_function_type</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>const VectorXd &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp" line="113" column="16" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp" bodystart="113" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a4bdd9bc37e678e9bc8c9d8c2a80c6a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MatrixXd</type>
        <definition>MatrixXd Marmot::NumericalAlgorithms::Differentiation::Complex::fourthOrderAccurateDerivative</definition>
        <argsstring>(const vector_to_vector_function_type &amp;F, const VectorXd &amp;X)</argsstring>
        <name>fourthOrderAccurateDerivative</name>
        <qualifiedname>Marmot::NumericalAlgorithms::Differentiation::Complex::fourthOrderAccurateDerivative</qualifiedname>
        <param>
          <type>const <ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" kindref="member">vector_to_vector_function_type</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>const VectorXd &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp" line="148" column="16" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp" bodystart="148" bodyend="181"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotNumericalDifferentiation.h" line="45" column="5"/>
  </compounddef>
</doxygen>

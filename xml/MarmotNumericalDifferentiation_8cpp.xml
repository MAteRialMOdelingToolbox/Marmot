<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="MarmotNumericalDifferentiation_8cpp" kind="file" language="C++">
    <compoundname>MarmotNumericalDifferentiation.cpp</compoundname>
    <includes refid="MarmotNumericalDifferentiation_8h" local="yes">Marmot/MarmotNumericalDifferentiation.h</includes>
    <includes refid="MarmotConstants_8h" local="yes">Marmot/MarmotConstants.h</includes>
    <includes local="no">complex</includes>
    <incdepgraph>
      <node id="4">
        <label>Marmot/MarmotConstants.h</label>
        <link refid="MarmotConstants_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Marmot/MarmotMath.h</label>
        <link refid="MarmotMath_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Marmot/MarmotNumericalDifferentiation.h</label>
        <link refid="MarmotNumericalDifferentiation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Marmot/MarmotTypedefs.h</label>
        <link refid="MarmotTypedefs_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp</label>
        <link refid="MarmotNumericalDifferentiation_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Eigen/Core</label>
      </node>
      <node id="8">
        <label>Eigen/Dense</label>
      </node>
      <node id="12">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>autodiff/forward/dual.hpp</label>
      </node>
      <node id="13">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="11">
        <label>autodiff/forward/real.hpp</label>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="14">
        <label>complex</label>
      </node>
      <node id="15">
        <label>functional</label>
      </node>
      <node id="9">
        <label>unsupported/Eigen/CXX11/Tensor</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceMarmot">Marmot</innernamespace>
    <innernamespace refid="namespaceMarmot_1_1NumericalAlgorithms">Marmot::NumericalAlgorithms</innernamespace>
    <innernamespace refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation">Marmot::NumericalAlgorithms::Differentiation</innernamespace>
    <innernamespace refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex">Marmot::NumericalAlgorithms::Differentiation::Complex</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MarmotNumericalDifferentiation_8h" kindref="compound">Marmot/MarmotNumericalDifferentiation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MarmotConstants_8h" kindref="compound">Marmot/MarmotConstants.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Eigen;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot" kindref="compound">Marmot</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation" kindref="compound">NumericalAlgorithms::Differentiation</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1a3e2d0865fdcd10da6e0b263f686c4858" kindref="member">forwardDifference</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1a3589bd8fc3e0c821b0e51a9594ebc306" kindref="member">scalar_to_scalar_function_type</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>std::max(<sp/>1.0,<sp/>std::abs(<sp/>x<sp/>)<sp/>)<sp/>*<sp/><ref refid="namespaceMarmot_1_1Constants_1aaa827cc20ee315713a3c40614f14ea34" kindref="member">Marmot::Constants::SquareRootEps</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out<sp/><sp/>=<sp/>(<sp/>f(<sp/>x<sp/>+<sp/>h<sp/>)<sp/>-<sp/>f(<sp/>x<sp/>)<sp/>)<sp/>/<sp/>h;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1a7de02aa48201ccdb190450dcfd34fa97" kindref="member">centralDifference</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1a3589bd8fc3e0c821b0e51a9594ebc306" kindref="member">scalar_to_scalar_function_type</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>std::max(<sp/>1.0,<sp/>std::abs(<sp/>x<sp/>)<sp/>)<sp/>*<sp/><ref refid="namespaceMarmot_1_1Constants_1a7937bdbef7a0742b796ff1b863b3af71" kindref="member">Marmot::Constants::CubicRootEps</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out<sp/><sp/>=<sp/>(<sp/>f(<sp/>x<sp/>+<sp/>h<sp/>)<sp/>-<sp/>f(<sp/>x<sp/>-<sp/>h<sp/>)<sp/>)<sp/>/<sp/>(<sp/>2.<sp/>*<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXd<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1a3e2d0865fdcd10da6e0b263f686c4858" kindref="member">forwardDifference</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1ac9b0be30ffd7559ab0a92eea4ee75f72" kindref="member">vector_to_vector_function_type</ref>&amp;<sp/>F,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXd&amp;<sp/>X<sp/>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXd<sp/>fx<sp/>=<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>X<sp/>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xSize<sp/><sp/>=<sp/>X.rows();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fxSize<sp/>=<sp/>fx.rows();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd<sp/><sp/><sp/>J(<sp/>fxSize,<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXd<sp/>rightX(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref><sp/>&lt;<sp/>xSize;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>std::max(<sp/>1.0,<sp/>std::abs(<sp/>X(<sp/>i<sp/>)<sp/>)<sp/>)<sp/>*<sp/><ref refid="namespaceMarmot_1_1Constants_1aaa827cc20ee315713a3c40614f14ea34" kindref="member">Marmot::Constants::SquareRootEps</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightX<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightX(<sp/>i<sp/>)<sp/>+=<sp/>h;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J.col(<sp/>i<sp/>)<sp/>=<sp/>(<sp/><sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>rightX<sp/>)<sp/><sp/>-<sp/>fx<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/></highlight><highlight class="comment">//------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>1.<sp/>*<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>J;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>MatrixXd<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1a7de02aa48201ccdb190450dcfd34fa97" kindref="member">centralDifference</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1ac9b0be30ffd7559ab0a92eea4ee75f72" kindref="member">vector_to_vector_function_type</ref>&amp;<sp/>F,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXd&amp;<sp/>X<sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xSize<sp/>=<sp/>X.rows();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd<sp/><sp/><sp/>J(<sp/>xSize,<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXd<sp/>leftX(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXd<sp/>rightX(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref><sp/>&lt;<sp/>xSize;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>std::max(<sp/>1.0,<sp/>std::abs(<sp/>X(<sp/>i<sp/>)<sp/>)<sp/>)<sp/>*<sp/><ref refid="namespaceMarmot_1_1Constants_1a7937bdbef7a0742b796ff1b863b3af71" kindref="member">Marmot::Constants::CubicRootEps</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftX<sp/><sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightX<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftX(<sp/>i<sp/>)<sp/>-=<sp/>h;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightX(<sp/>i<sp/>)<sp/>+=<sp/>h;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J.col(<sp/>i<sp/>)<sp/>=<sp/>(<sp/><sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>rightX<sp/>)<sp/><sp/>-<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>leftX<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/></highlight><highlight class="comment">//------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>2.<sp/>*<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>J;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex" kindref="compound">Complex</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Implementation<sp/>of<sp/>Numerical<sp/>Differantiation<sp/>using<sp/>Complex<sp/>Step<sp/>Approximations</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>further<sp/>Information<sp/>can<sp/>be<sp/>found<sp/>in</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>Martins<sp/>et<sp/>al.<sp/>(2003)<sp/>The<sp/>Complex-Step<sp/>Derivative<sp/>Approximation</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>Lai<sp/>et<sp/>al.<sp/>(2005)<sp/>New<sp/>Complex-Step<sp/>Derivative<sp/>Approximations<sp/>...</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a5ee4f2bd6a00a7f61d3670ef77fbbc4a" kindref="member">forwardDifference</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a4a90e6de8284baeb8274c9ef1da60865" kindref="member">scalar_to_scalar_function_type</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a28c6239f908d27d61a4fb860643e54a4" kindref="member">complexDouble</ref><sp/>x_<sp/><sp/>=<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a28c6239f908d27d61a4fb860643e54a4" kindref="member">complexDouble</ref>(<sp/>x<sp/>)<sp/>+<sp/>1e-20<sp/>*<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae67392e859d5c18f0943f1b74c12e71c" kindref="member">imaginaryUnit</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>f(<sp/>x_<sp/>).imag()<sp/>/<sp/>1e-20;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;<sp/>VectorXd,<sp/>MatrixXd<sp/>&gt;<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a5ee4f2bd6a00a7f61d3670ef77fbbc4a" kindref="member">forwardDifference</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" kindref="member">vector_to_vector_function_type</ref>&amp;<sp/>F,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXd&amp;<sp/>X<sp/>)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>according<sp/>to<sp/>Martins<sp/>et<sp/>al.<sp/>(2003)<sp/>Equ.<sp/>6</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>according<sp/>to<sp/>Lai<sp/>et<sp/>al.<sp/>(2005)<sp/>Equ.<sp/>7</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xSize<sp/>=<sp/>X.rows();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd<sp/><sp/><sp/>J(<sp/>xSize,<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>rightX(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>F_(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref><sp/>&lt;<sp/>xSize;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>h<sp/>=<sp/>std::max(<sp/>1.0,<sp/>std::abs(<sp/>X(<sp/>i<sp/>)<sp/>)<sp/>)<sp/>*<sp/>1e-16;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightX<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightX(<sp/>i<sp/>)<sp/>+=<sp/>1e-20<sp/>*<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae67392e859d5c18f0943f1b74c12e71c" kindref="member">imaginaryUnit</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>rightX<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J.col(<sp/>i<sp/>)<sp/>=<sp/>F_.imag()<sp/>/<sp/>1e-20;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>F_.real(),<sp/>J<sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1aa36a3313864346a2aeacde16bdaca2ca" kindref="member">centralDifference</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" kindref="member">vector_to_vector_function_type</ref>&amp;<sp/>F,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXd&amp;<sp/>X<sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>according<sp/>to<sp/>Lai<sp/>et<sp/>al.<sp/>(2005)<sp/>Equ.<sp/>19</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xSize<sp/>=<sp/>X.rows();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd<sp/><sp/><sp/>J(<sp/>xSize,<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>e(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>rightX(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>leftX(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a28c6239f908d27d61a4fb860643e54a4" kindref="member">complexDouble</ref><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae0c370efd89ca4bad97eaa994f36036c" kindref="member">i_</ref><sp/>=<sp/><ref refid="namespaceMarmot_1_1Constants_1a33698d788303a9dd40c1489cdfba6aa7" kindref="member">Marmot::Constants::sqrt2</ref><sp/>/<sp/>2.<sp/>*<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a6404fc111180740f6b006d16f9ba7615" kindref="member">complexUnit</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref><sp/>&lt;<sp/>xSize;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>std::max(<sp/>1.0,<sp/>std::abs(<sp/>X(<sp/>i<sp/>)<sp/>)<sp/>)<sp/>*<sp/><ref refid="namespaceMarmot_1_1Constants_1aaa827cc20ee315713a3c40614f14ea34" kindref="member">Marmot::Constants::SquareRootEps</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.setZero();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e(<sp/>i<sp/>)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftX<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftX<sp/>-=<sp/>e<sp/>*<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae0c370efd89ca4bad97eaa994f36036c" kindref="member">i_</ref><sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightX<sp/>=<sp/>X;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightX<sp/>+=<sp/>e<sp/>*<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae0c370efd89ca4bad97eaa994f36036c" kindref="member">i_</ref><sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J.col(<sp/>i<sp/>)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>rightX<sp/>)<sp/>-<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>leftX<sp/>)<sp/><sp/>).imag()</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><ref refid="namespaceMarmot_1_1Constants_1a33698d788303a9dd40c1489cdfba6aa7" kindref="member">Marmot::Constants::sqrt2</ref><sp/>*<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>J;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a1d374430c01a8b167504cc715f1997ad" kindref="member">fourthOrderAccurateDerivative</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1a172748ccbd9e78f7805463806da8abc2" kindref="member">vector_to_vector_function_type</ref>&amp;<sp/>F,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXd&amp;<sp/>X<sp/>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>according<sp/>to<sp/>Lai<sp/>et<sp/>al.<sp/>(2005)<sp/>Equ.<sp/>24</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xSize<sp/>=<sp/>X.rows();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd<sp/><sp/><sp/>J(<sp/>xSize,<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>complex_X(<sp/>X<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>e(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>x1_(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>x2_(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>x3_(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorXcd<sp/><sp/>x4_(<sp/>xSize<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref><sp/>&lt;<sp/>xSize;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>std::max(<sp/>1.0,<sp/>std::abs(<sp/>X(<sp/>i<sp/>)<sp/>)<sp/>)<sp/>*<sp/><ref refid="namespaceMarmot_1_1Constants_1aaa827cc20ee315713a3c40614f14ea34" kindref="member">Marmot::Constants::SquareRootEps</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.setZero();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e(<sp/>i<sp/>)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1_<sp/>=<sp/>complex_X<sp/>+<sp/>e<sp/>/<sp/>2.<sp/>*<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae0c370efd89ca4bad97eaa994f36036c" kindref="member">i_</ref><sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2_<sp/>=<sp/>complex_X<sp/>-<sp/>e<sp/>/<sp/>2.<sp/>*<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae0c370efd89ca4bad97eaa994f36036c" kindref="member">i_</ref><sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x3_<sp/>=<sp/>complex_X<sp/>+<sp/>e<sp/>*<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae0c370efd89ca4bad97eaa994f36036c" kindref="member">i_</ref><sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x4_<sp/>=<sp/>complex_X<sp/>-<sp/>e<sp/>*<sp/><ref refid="namespaceMarmot_1_1NumericalAlgorithms_1_1Differentiation_1_1Complex_1ae0c370efd89ca4bad97eaa994f36036c" kindref="member">i_</ref><sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J.col(<sp/>i<sp/>)<sp/>=<sp/>(<sp/>8.*<sp/>(<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>x1_<sp/>)<sp/>-<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>x2_<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>(<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>x3_<sp/>)<sp/>-<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>x4_<sp/>)<sp/>)<sp/>).imag()</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(<sp/><ref refid="namespaceMarmot_1_1Constants_1a33698d788303a9dd40c1489cdfba6aa7" kindref="member">Marmot::Constants::sqrt2</ref><sp/>*<sp/>3.<sp/>*<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>J;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Complex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>NumericalAlgorithms::Differentiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Marmot</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotNumericalDifferentiation.cpp"/>
  </compounddef>
</doxygen>

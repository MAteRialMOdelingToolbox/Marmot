<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="MarmotAutomaticDifferentiation_8h" kind="file" language="C++">
    <compoundname>MarmotAutomaticDifferentiation.h</compoundname>
    <includes local="yes">autodiff/forward/dual/eigen.hpp</includes>
    <includes local="no">autodiff/forward/dual/dual.hpp</includes>
    <includes local="no">functional</includes>
    <includedby refid="MarmotAutomaticDifferentiationForFastor_8h" local="yes">/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotAutomaticDifferentiationForFastor.h</includedby>
    <includedby refid="MarmotAutomaticDifferentiation_8cpp" local="yes">/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotAutomaticDifferentiation.cpp</includedby>
    <includedby refid="MarmotMaterialHypoElasticAD_8cpp" local="yes">/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/src/MarmotMaterialHypoElasticAD.cpp</includedby>
    <includedby refid="ADVonMises_8cpp" local="yes">/home/runner/work/Marmot/Marmot/modules/materials/ADVonMises/src/ADVonMises.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotAutomaticDifferentiation.h</label>
        <link refid="MarmotAutomaticDifferentiation_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="2">
        <label>autodiff/forward/dual/eigen.hpp</label>
      </node>
      <node id="4">
        <label>functional</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotAutomaticDifferentiation.h</label>
        <link refid="MarmotAutomaticDifferentiation_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotAutomaticDifferentiationForFastor.h</label>
        <link refid="MarmotAutomaticDifferentiationForFastor_8h"/>
      </node>
      <node id="3">
        <label>/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotAutomaticDifferentiation.cpp</label>
        <link refid="MarmotAutomaticDifferentiation_8cpp"/>
      </node>
      <node id="4">
        <label>/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/src/MarmotMaterialHypoElasticAD.cpp</label>
        <link refid="MarmotMaterialHypoElasticAD_8cpp"/>
      </node>
      <node id="5">
        <label>/home/runner/work/Marmot/Marmot/modules/materials/ADVonMises/src/ADVonMises.cpp</label>
        <link refid="ADVonMises_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceMarmot">Marmot</innernamespace>
    <innernamespace refid="namespaceMarmot_1_1AutomaticDifferentiation">Marmot::AutomaticDifferentiation</innernamespace>
    <innernamespace refid="namespaceautodiff">autodiff</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>---------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>_<sp/>__<sp/>___<sp/><sp/><sp/>__<sp/>_<sp/>_<sp/>__<sp/>_<sp/>__<sp/>___<sp/><sp/><sp/>___<sp/>|<sp/>|_</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>|<sp/>&apos;_<sp/>`<sp/>_<sp/>\<sp/>/<sp/>_`<sp/>|<sp/>&apos;__|<sp/>&apos;_<sp/>`<sp/>_<sp/>\<sp/>/<sp/>_<sp/>\|<sp/>__|</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>(_|<sp/>|<sp/>|<sp/><sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>|<sp/>(_)<sp/>|<sp/>|_</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>|_|<sp/>|_|<sp/>|_|\__,_|_|<sp/><sp/>|_|<sp/>|_|<sp/>|_|\___/<sp/>\__|</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Unit<sp/>of<sp/>Strength<sp/>of<sp/>Materials<sp/>and<sp/>Structural<sp/>Analysis</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>University<sp/>of<sp/>Innsbruck,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>2020<sp/>-<sp/>today</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>festigkeitslehre@uibk.ac.at</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Alexander<sp/>Dummer<sp/>alexander.dummer@uibk.ac.at</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>MAteRialMOdellingToolbox<sp/>(marmot).</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>The<sp/>full<sp/>text<sp/>of<sp/>the<sp/>license<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>file<sp/>LICENSE.md<sp/>at</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>the<sp/>top<sp/>level<sp/>directory<sp/>of<sp/>marmot.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>---------------------------------------------------------------------</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;autodiff/forward/dual/eigen.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;autodiff/forward/dual/dual.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot" kindref="compound">Marmot</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="namespaceMarmot_1_1AutomaticDifferentiation" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot_1_1AutomaticDifferentiation" kindref="compound">AutomaticDifferentiation</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">autodiff;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Eigen;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>dual2nd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a37db7167c4a2d4cb39e61c2fec762760" kindref="member">shiftTo2ndOrderDual</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dual&amp;<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorXdual2nd<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a37db7167c4a2d4cb39e61c2fec762760" kindref="member">shiftTo2ndOrderDual</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXdual&amp;<sp/>X<sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G<sp/>&gt;</highlight></codeline>
<codeline lineno="44" refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Dual&lt;<sp/>T,<sp/>G<sp/>&gt;&amp;<sp/>dual<sp/>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>detail::Order&lt;<sp/>Dual&lt;<sp/>T,<sp/>G<sp/>&gt;<sp/>&gt;;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<sp/>order<sp/>&lt;=<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<sp/>order<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dual.val;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<sp/>order<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dual.val;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode</ref>&lt;<sp/>order<sp/>-<sp/>1<sp/>&gt;(<sp/>dual.val<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>order,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G<sp/>&gt;</highlight></codeline>
<codeline lineno="56" refid="namespaceMarmot_1_1AutomaticDifferentiation_1a9ded965ad7faa15795d1ed43a1a26a4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode</ref>(<sp/>Dual&lt;<sp/>T,<sp/>G<sp/>&gt;&amp;<sp/>dual<sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>detail::Order&lt;<sp/>Dual&lt;<sp/>T,<sp/>G<sp/>&gt;<sp/>&gt;;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<sp/>order<sp/>&lt;=<sp/>N<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<sp/>order<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dual.val;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<sp/>order<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dual.val;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode</ref>&lt;<sp/>order<sp/>-<sp/>1<sp/>&gt;(<sp/>dual.val<sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>order<sp/>&gt;</highlight></codeline>
<codeline lineno="69" refid="namespaceMarmot_1_1AutomaticDifferentiation_1a9ad0d01310a119fdeb6dad14f737d478" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>autodiff::HigherOrderDual&lt;<sp/>order<sp/>+<sp/>1,<sp/>double<sp/>&gt;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a9ad0d01310a119fdeb6dad14f737d478" kindref="member">increaseDualOrderWithShift</ref>(</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>autodiff::HigherOrderDual&lt;<sp/>order,<sp/>double<sp/>&gt;&amp;<sp/>in<sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">out_scalar_type<sp/>=<sp/>autodiff::HigherOrderDual&lt;<sp/>order<sp/>+<sp/>1,<sp/>double<sp/>&gt;;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">autodiff::detail;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_scalar_type<sp/>out(<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><sp/><sp/>in_point<sp/><sp/>=<sp/>&amp;<ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode&lt; order &gt;</ref>(<sp/>in<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_point<sp/>=<sp/>&amp;<ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode&lt; order + 1 &gt;</ref>(<sp/>out<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(<sp/>std::pow(<sp/>2,<sp/>order<sp/>)<sp/>);<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<sp/>out_point<sp/>+<sp/>i<sp/>)<sp/>=<sp/>*(<sp/>in_point<sp/>+<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>order<sp/>&gt;</highlight></codeline>
<codeline lineno="87" refid="namespaceMarmot_1_1AutomaticDifferentiation_1ad50a4452ffce2fcc7331b9873f0a6529" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>autodiff::HigherOrderDual&lt;<sp/>order<sp/>-<sp/>1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ad50a4452ffce2fcc7331b9873f0a6529" kindref="member">decreaseDualOrder</ref>(<sp/>autodiff::HigherOrderDual&lt;<sp/>order,<sp/>double<sp/>&gt;&amp;<sp/>in<sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">out_scalar_type<sp/>=<sp/>autodiff::HigherOrderDual&lt;<sp/>order<sp/>-<sp/>1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">autodiff::detail;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_scalar_type<sp/>out(<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_point<sp/><sp/>=<sp/>&amp;<ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode&lt; order &gt;</ref>(<sp/>in<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_point<sp/>=<sp/>&amp;<ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode</ref>&lt;<sp/>order<sp/>-<sp/>1<sp/>&gt;(<sp/>out<sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(<sp/>std::pow(<sp/>2,<sp/>order<sp/>-<sp/>1<sp/>)<sp/>);<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<sp/>out_point<sp/>+<sp/>i<sp/>)<sp/>=<sp/>*(<sp/>in_point<sp/>+<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>order<sp/>&gt;</highlight></codeline>
<codeline lineno="104" refid="namespaceMarmot_1_1AutomaticDifferentiation_1a19f193e335d4a3fac9f70a357057ab3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>autodiff::HigherOrderDual&lt;<sp/>order<sp/>-<sp/>1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a19f193e335d4a3fac9f70a357057ab3a" kindref="member">decreaseDualOrderWithShift</ref>(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>autodiff::HigherOrderDual&lt;<sp/>order,<sp/>double<sp/>&gt;&amp;<sp/>in<sp/>)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">out_scalar_type<sp/>=<sp/>autodiff::HigherOrderDual&lt;<sp/>order<sp/>-<sp/>1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">autodiff::detail;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_scalar_type<sp/>out(<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_point<sp/><sp/>=<sp/>&amp;<ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode&lt; order &gt;</ref>(<sp/>in<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_point<sp/>=<sp/>&amp;<ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a965d13316fe41d118591690ba5928978" kindref="member">valnode</ref>&lt;<sp/>order<sp/>-<sp/>1<sp/>&gt;(<sp/>out<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size_t(<sp/>std::pow(<sp/>2,<sp/>order<sp/>-<sp/>1<sp/>)<sp/>);<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(<sp/>out_point<sp/>+<sp/>i<sp/>)<sp/>=<sp/>*(<sp/>in_point<sp/>+<sp/>i<sp/>+<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(<sp/>std::pow(<sp/>2,<sp/>order<sp/>-<sp/>1<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>order<sp/>&gt;</highlight></codeline>
<codeline lineno="122" refid="namespaceMarmot_1_1AutomaticDifferentiation_1ac362f99b3ea8baac95751c0ecd474165" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;<sp/>HigherOrderDual&lt;<sp/>order<sp/>+<sp/>1,<sp/>double<sp/>&gt;,<sp/>-1<sp/>&gt;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a9ad0d01310a119fdeb6dad14f737d478" kindref="member">increaseDualOrderWithShift</ref>(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;<sp/>HigherOrderDual&lt;<sp/>order,<sp/>double<sp/>&gt;,<sp/>-1<sp/>&gt;&amp;<sp/>in<sp/>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">in_scalar_type<sp/><sp/>=<sp/>HigherOrderDual&lt;<sp/>order,<sp/>double<sp/>&gt;;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">out_scalar_type<sp/>=<sp/>HigherOrderDual&lt;<sp/>order<sp/>+<sp/>1,<sp/>double<sp/>&gt;;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;<sp/>out_scalar_type,<sp/>-1<sp/>&gt;<sp/>out<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Vector&lt;<sp/>out_scalar_type,<sp/>-1<sp/>&gt;(<sp/>in.size()<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_scalar_type*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_data<sp/>=<sp/>out.data();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>in_scalar_type*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_data<sp/><sp/>=<sp/>in.data();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>in.size();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_data[i]<sp/>=<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a9ad0d01310a119fdeb6dad14f737d478" kindref="member">increaseDualOrderWithShift&lt; order &gt;</ref>(<sp/>in_data[i]<sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="namespaceMarmot_1_1AutomaticDifferentiation_1aee8267e1c1d89842e73fb874cdb80d0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1aee8267e1c1d89842e73fb874cdb80d0e" kindref="member">scalar_to_scalar_function_type</ref><sp/>=<sp/>std::function&lt;<sp/>dual(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dual&amp;<sp/>)<sp/>&gt;;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1aee8267e1c1d89842e73fb874cdb80d0e" kindref="member">scalar_to_scalar_function_type</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="namespaceMarmot_1_1AutomaticDifferentiation_1ad17f2d76b0904d01b6249ada27eecdaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ad17f2d76b0904d01b6249ada27eecdaf" kindref="member">scalar_to_scalar_function_type_2nd</ref><sp/>=<sp/>std::function&lt;<sp/>dual2nd(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dual2nd&amp;<sp/>)<sp/>&gt;;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>dual<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ad17f2d76b0904d01b6249ada27eecdaf" kindref="member">scalar_to_scalar_function_type_2nd</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dual&amp;<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="namespaceMarmot_1_1AutomaticDifferentiation_1a18ea932f42e59dd7f58875216ecd49e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a18ea932f42e59dd7f58875216ecd49e1" kindref="member">vector_to_vector_function_type_dual</ref><sp/>=<sp/>std::function&lt;<sp/>VectorXdual(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXdual&amp;<sp/>X<sp/>)<sp/>&gt;;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;<sp/>VectorXd,<sp/>MatrixXd<sp/>&gt;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a37fa3eec636936303f0bb6ded3b3288d" kindref="member">dF_dX</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a18ea932f42e59dd7f58875216ecd49e1" kindref="member">vector_to_vector_function_type_dual</ref>&amp;<sp/>F,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXd&amp;<sp/>X<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="namespaceMarmot_1_1AutomaticDifferentiation_1a8e858fa54bfb2c41332ce3dc7cf5e45c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a8e858fa54bfb2c41332ce3dc7cf5e45c" kindref="member">vector_to_vector_function_type_dual2nd</ref><sp/>=<sp/>std::function&lt;<sp/>VectorXdual2nd(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXdual2nd&amp;<sp/>X<sp/>)<sp/>&gt;;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;<sp/>VectorXdual,<sp/>MatrixXdual<sp/>&gt;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1afe3a1926bfc33ef4201b9ddb3ffc3d19" kindref="member">dF_dX_2nd</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a8e858fa54bfb2c41332ce3dc7cf5e45c" kindref="member">vector_to_vector_function_type_dual2nd</ref>&amp;<sp/>F,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXdual&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>AutomaticDifferentiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Marmot</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotAutomaticDifferentiation.h"/>
  </compounddef>
</doxygen>

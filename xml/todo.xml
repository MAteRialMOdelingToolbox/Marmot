<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="todo" kind="page">
    <compoundname>todo</compoundname>
    <title>Todo List</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><variablelist>
<varlistentry><term>Class <ref refid="classMarmot_1_1ContinuumMechanics_1_1CommonConstitutiveModels_1_1DuvautLionsViscosity" kindref="compound">Marmot::ContinuumMechanics::CommonConstitutiveModels::DuvautLionsViscosity&lt; nMatTangentSize &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000003"/>: Update member names to more descriptive ones  </para>
</listitem>
<varlistentry><term>Member <ref refid="classMarmot_1_1ContinuumMechanics_1_1CommonConstitutiveModels_1_1DuvautLionsViscosity_1a616ad6bb6d38671744209ca9dd0435e9" kindref="member">Marmot::ContinuumMechanics::CommonConstitutiveModels::DuvautLionsViscosity&lt; nMatTangentSize &gt;::applyViscosityOnMatTangent</ref>  (const <ref refid="classMarmot_1_1ContinuumMechanics_1_1CommonConstitutiveModels_1_1DuvautLionsViscosity_1ae2af85711baa602eae4d1900f62a5332" kindref="member">TangentSizedMatrix</ref> &amp;matTangentInv, double dT)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000004"/>: Check if application to inverse can be replaced by application to non-inverse in general  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespaceMarmot_1_1Math_1a17783b288ece1a97c5a43490744c98c2" kindref="member">Marmot::Math::macaulyMatrix</ref>  (const Eigen::Matrix&lt; double, nRows, nCols &gt; &amp;mat)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000001"/>: Can be replaced easily with Eigen&apos;s array() functionality ???  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespaceMarmot_1_1Math_1aa70f058118d023378595a10df1872291" kindref="member">Marmot::Math::semiImplicitEuler</ref>  (Eigen::Matrix&lt; double, ySize, 1 &gt; yN, const double dt, functionType fRate, Args &amp;&amp;... fRateArgs)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000002"/>: Replace inverse bei solving equation system? </para>
<para></para>
<para>: Use external central difference function?  </para>
</listitem>
<varlistentry><term>Member <ref refid="classMarmotMaterialHyperElastic_1aaffc377bb0b49799a709f37ac01e3754" kindref="member">MarmotMaterialHyperElastic::computeStress</ref>  (double *S, double *dSdE, const double *FOld, const double *FNew, const double *timeOld, const double dT, double &amp;pNewDT) override</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000006"/>A default implementation is provided. </para>
</listitem>
<varlistentry><term>Member <ref refid="classMarmotMaterialHyperElastic_1aab2db47ca209a86cfca449e456a1c8ee" kindref="member">MarmotMaterialHyperElastic::computeStressPK2</ref>  (double *S, double *dSdE, const double *E, const double *timeOld, const double dT, double &amp;pNewDT)=0</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000007"/>Should we use function overloading in this case and simple also use computeStress for the function name? </para>
</listitem>
<varlistentry><term>Member <ref refid="classMarmotMaterialHypoElastic_1acf6b9c6f3b81effab814390600e974fa" kindref="member">MarmotMaterialHypoElastic::computeStress</ref>  (double *stress, double *dStressDDStrain, const double *FOld, const double *FNew, const double *timeOld, const double dT, double &amp;pNewDT) override</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000008"/>A default implementation is provided.</para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="todo"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespaceMarmot_1_1Testing" kind="namespace" language="C++">
    <compoundname>Marmot::Testing</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1a0fd6d75987f47297f37a92bdc698fb04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Marmot::Testing::checkIfEqual</definition>
        <argsstring>(const double a, const double b, const double tol=1e-15)</argsstring>
        <name>checkIfEqual</name>
        <qualifiedname>Marmot::Testing::checkIfEqual</qualifiedname>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="39" column="8" declfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" declline="39" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1abc0bb108985d93862de52d8efb07d457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Marmot::Testing::checkIfEqual</definition>
        <argsstring>(const autodiff::dual a, const autodiff::dual b, const double tol=1e-15)</argsstring>
        <name>checkIfEqual</name>
        <qualifiedname>Marmot::Testing::checkIfEqual</qualifiedname>
        <param>
          <type>const autodiff::dual</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const autodiff::dual</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="41" column="8" declfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" declline="41" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1a536c090df341abb53026544c6ba29a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Marmot::Testing::checkIfEqual</definition>
        <argsstring>(const std::complex&lt; double &gt; a, const std::complex&lt; double &gt; b, const double tol=1e-15)</argsstring>
        <name>checkIfEqual</name>
        <qualifiedname>Marmot::Testing::checkIfEqual</qualifiedname>
        <param>
          <type>const std::complex&lt; double &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="43" column="8" declfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" declline="43" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1a87715a3d2e074a8043020ceaffc9e82e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Marmot::Testing::getString</definition>
        <argsstring>(const double a)</argsstring>
        <name>getString</name>
        <qualifiedname>Marmot::Testing::getString</qualifiedname>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="45" column="15" declfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" declline="45" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1a0483b94b58257122784697c6492627f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Marmot::Testing::getString</definition>
        <argsstring>(const autodiff::dual a)</argsstring>
        <name>getString</name>
        <qualifiedname>Marmot::Testing::getString</qualifiedname>
        <param>
          <type>const autodiff::dual</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="46" column="15" declfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" declline="46" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1ae8532780a87a911bd99a477fe5e8c812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Marmot::Testing::checkIfEqual</definition>
        <argsstring>(const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;a, const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;b, const double tol=1e-15)</argsstring>
        <name>checkIfEqual</name>
        <qualifiedname>Marmot::Testing::checkIfEqual</qualifiedname>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="49" column="8" bodyfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" bodystart="49" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1aa9631a49d5e76b29696611bf3ed21ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>long int...</type>
            <declname>Rest</declname>
            <defname>Rest</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Marmot::Testing::checkIfEqual</definition>
        <argsstring>(const Eigen::TensorFixedSize&lt; T, Eigen::Sizes&lt; Rest... &gt; &gt; &amp;a, const Eigen::TensorFixedSize&lt; T, Eigen::Sizes&lt; Rest... &gt; &gt; &amp;b, const double tol=1e-15)</argsstring>
        <name>checkIfEqual</name>
        <qualifiedname>Marmot::Testing::checkIfEqual</qualifiedname>
        <param>
          <type>const Eigen::TensorFixedSize&lt; T, Eigen::Sizes&lt; Rest... &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::TensorFixedSize&lt; T, Eigen::Sizes&lt; Rest... &gt; &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="70" column="8" bodyfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" bodystart="70" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1a2650f599f03fc8c503c969366b1b5812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Rest</declname>
            <defname>Rest</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Marmot::Testing::checkIfEqual</definition>
        <argsstring>(const Fastor::Tensor&lt; T, Rest... &gt; &amp;a, const Fastor::Tensor&lt; T, Rest... &gt; &amp;b, const double tol=1e-15)</argsstring>
        <name>checkIfEqual</name>
        <qualifiedname>Marmot::Testing::checkIfEqual</qualifiedname>
        <param>
          <type>const Fastor::Tensor&lt; T, Rest... &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Fastor::Tensor&lt; T, Rest... &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tol</declname>
          <defval>1e-15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="89" column="8" bodyfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" bodystart="89" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1af036d587586043fa17744b4d17a459db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Marmot::Testing::throwExceptionOnFailure</definition>
        <argsstring>(const bool condition, const std::string &amp;message=&quot;&quot;)</argsstring>
        <name>throwExceptionOnFailure</name>
        <qualifiedname>Marmot::Testing::throwExceptionOnFailure</qualifiedname>
        <param>
          <type>const bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="106" column="8" declfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" declline="106" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1a419cfd0357321b6165f13314560b904a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Marmot::Testing::executeTestsAndCollectExceptions</definition>
        <argsstring>(const std::vector&lt; std::function&lt; void() &gt; &gt; &amp;testFunctions)</argsstring>
        <name>executeTestsAndCollectExceptions</name>
        <qualifiedname>Marmot::Testing::executeTestsAndCollectExceptions</qualifiedname>
        <param>
          <type>const std::vector&lt; std::function&lt; void() &gt; &gt; &amp;</type>
          <declname>testFunctions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="108" column="8" declfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" declline="108" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1a06f3f34b638c6c214635b15cb7e2b62f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; double, N, 2 &gt;</type>
        <definition>Eigen::Matrix&lt; double, N, 2 &gt; Marmot::Testing::fibonacciLatticeHemisphere</definition>
        <argsstring>()</argsstring>
        <name>fibonacciLatticeHemisphere</name>
        <qualifiedname>Marmot::Testing::fibonacciLatticeHemisphere</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="111" column="17" bodyfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" bodystart="111" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceMarmot_1_1Testing_1a77104a97c304eda282f242eea0f09502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Marmot::Testing::spinTurbokreisel</definition>
        <argsstring>(const std::unique_ptr&lt; MarmotMaterialHypoElastic &gt; &amp;material, double *stress, double *dStress_dStrain, const double *dStrain, const double *timeOld, const double dT, double &amp;pNewDT, const double stressTol=1e-15, const double stiffnessTol=1e-15)</argsstring>
        <name>spinTurbokreisel</name>
        <qualifiedname>Marmot::Testing::spinTurbokreisel</qualifiedname>
        <param>
          <type>const std::unique_ptr&lt; <ref refid="classMarmotMaterialHypoElastic" kindref="compound">MarmotMaterialHypoElastic</ref> &gt; &amp;</type>
          <declname>material</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>stress</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dStress_dStrain</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>dStrain</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>timeOld</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dT</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>pNewDT</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>stressTol</declname>
          <defval>1e-15</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>stiffnessTol</declname>
          <defval>1e-15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="129" column="8" declfile="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" declline="129" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/Marmot/Marmot/include/Marmot/MarmotTesting.h" line="37" column="1"/>
  </compounddef>
</doxygen>

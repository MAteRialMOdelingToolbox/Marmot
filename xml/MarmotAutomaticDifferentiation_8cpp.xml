<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="MarmotAutomaticDifferentiation_8cpp" kind="file" language="C++">
    <compoundname>MarmotAutomaticDifferentiation.cpp</compoundname>
    <includes refid="MarmotAutomaticDifferentiation_8h" local="yes">Marmot/MarmotAutomaticDifferentiation.h</includes>
    <includes local="no">autodiff/forward/dual/eigen.hpp</includes>
    <includes local="no">autodiff/forward/utils/derivative.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>Marmot/MarmotAutomaticDifferentiation.h</label>
        <link refid="MarmotAutomaticDifferentiation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotAutomaticDifferentiation.cpp</label>
        <link refid="MarmotAutomaticDifferentiation_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>autodiff/forward/dual/dual.hpp</label>
      </node>
      <node id="3">
        <label>autodiff/forward/dual/eigen.hpp</label>
      </node>
      <node id="6">
        <label>autodiff/forward/utils/derivative.hpp</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceMarmot">Marmot</innernamespace>
    <innernamespace refid="namespaceMarmot_1_1AutomaticDifferentiation">Marmot::AutomaticDifferentiation</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MarmotAutomaticDifferentiation_8h" kindref="compound">Marmot/MarmotAutomaticDifferentiation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;autodiff/forward/dual/eigen.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;autodiff/forward/utils/derivative.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">autodiff;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Eigen;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot" kindref="compound">Marmot</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceMarmot_1_1AutomaticDifferentiation" kindref="compound">AutomaticDifferentiation</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>dual2nd<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a37db7167c4a2d4cb39e61c2fec762760" kindref="member">shiftTo2ndOrderDual</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dual&amp;<sp/>x<sp/>)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dual2nd<sp/>x2nd(<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2nd.val<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x2nd;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorXdual2nd<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a37db7167c4a2d4cb39e61c2fec762760" kindref="member">shiftTo2ndOrderDual</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXdual&amp;<sp/>X<sp/>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXdual2nd<sp/>X_;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/>sizeX<sp/>=<sp/>X.size();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a4e97095b6d06034139e2ee17b86c338a" kindref="member">j</ref><sp/>&lt;<sp/>sizeX;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a4e97095b6d06034139e2ee17b86c338a" kindref="member">j</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X_(<sp/>j<sp/>)<sp/>=<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a37db7167c4a2d4cb39e61c2fec762760" kindref="member">shiftTo2ndOrderDual</ref>(<sp/>X(<sp/>j<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X_;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1aee8267e1c1d89842e73fb874cdb80d0e" kindref="member">scalar_to_scalar_function_type</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dual<sp/>x_right;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x_right.val<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seed&lt;<sp/>1<sp/>&gt;(<sp/>x_right,<sp/>1.0<sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref><sp/>=<sp/>f(<sp/>x_right<sp/>).grad;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>dual<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ad17f2d76b0904d01b6249ada27eecdaf" kindref="member">scalar_to_scalar_function_type_2nd</ref>&amp;<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dual&amp;<sp/>x<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dual2nd<sp/>x_right<sp/>=<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a37db7167c4a2d4cb39e61c2fec762760" kindref="member">shiftTo2ndOrderDual</ref>(<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seed&lt;<sp/>1<sp/>&gt;(<sp/>x_right,<sp/>1.0<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dual<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dual2nd<sp/>f_right<sp/>=<sp/>f(<sp/>x_right<sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref>.val<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>derivative&lt;<sp/>1<sp/>&gt;(<sp/>f_right<sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref>.grad<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>derivative&lt;<sp/>2<sp/>&gt;(<sp/>f_right<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1ada497b02f84e8a978405d9eaa629d43b" kindref="member">df_dx</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;<sp/>VectorXd,<sp/>MatrixXd<sp/>&gt;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a37fa3eec636936303f0bb6ded3b3288d" kindref="member">dF_dX</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a18ea932f42e59dd7f58875216ecd49e1" kindref="member">vector_to_vector_function_type_dual</ref>&amp;<sp/>F,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXd&amp;<sp/>X<sp/>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXdual<sp/><sp/>X_(<sp/>X<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXdual<sp/><sp/>F_right;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeX<sp/>=<sp/>X_.rows();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXd<sp/><sp/><sp/><sp/><sp/>J(<sp/>sizeX,<sp/>sizeX<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXd<sp/><sp/><sp/><sp/><sp/>F_(<sp/>sizeX<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>J_ij<sp/>=<sp/>d<sp/>F_i<sp/>/<sp/>d<sp/>x_j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a4e97095b6d06034139e2ee17b86c338a" kindref="member">j</ref><sp/>&lt;<sp/>sizeX;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a4e97095b6d06034139e2ee17b86c338a" kindref="member">j</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed&lt;<sp/>1<sp/>&gt;(<sp/>X_(<sp/>j<sp/>),<sp/>1.0<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F_right<sp/>=<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>X_<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref><sp/>&lt;<sp/>sizeX;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J(<sp/>i,<sp/>j<sp/>)<sp/>=<sp/>derivative&lt;<sp/>1<sp/>&gt;(<sp/>F_right(<sp/>i<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed&lt;<sp/>1<sp/>&gt;(<sp/>X_(<sp/>j<sp/>),<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F_(<sp/>j<sp/>)<sp/>=<sp/>F_right(<sp/>j<sp/>).val;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>F_,<sp/>J<sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;<sp/>VectorXdual,<sp/>MatrixXdual<sp/>&gt;<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1afe3a1926bfc33ef4201b9ddb3ffc3d19" kindref="member">dF_dX_2nd</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a8e858fa54bfb2c41332ce3dc7cf5e45c" kindref="member">vector_to_vector_function_type_dual2nd</ref>&amp;<sp/>F,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorXdual&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXdual2nd<sp/>X_<sp/>=<sp/><ref refid="namespaceMarmot_1_1AutomaticDifferentiation_1a9ad0d01310a119fdeb6dad14f737d478" kindref="member">increaseDualOrderWithShift&lt; 1 &gt;</ref>(<sp/>X<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXdual2nd<sp/>F_right;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/>sizeX<sp/>=<sp/>X_.rows();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MatrixXdual<sp/><sp/><sp/><sp/>J(<sp/>sizeX,<sp/>sizeX<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VectorXdual<sp/><sp/><sp/><sp/>F_(<sp/>sizeX<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>J_ij<sp/>=<sp/>d<sp/>F_i<sp/>/<sp/>d<sp/>x_j</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a4e97095b6d06034139e2ee17b86c338a" kindref="member">j</ref><sp/>&lt;<sp/>sizeX;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a4e97095b6d06034139e2ee17b86c338a" kindref="member">j</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed&lt;<sp/>1<sp/>&gt;(<sp/>X_(<sp/>j<sp/>),<sp/>1.0<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F_right<sp/>=<sp/><ref refid="namespaceMarmot_1_1FiniteElement_1_1EAS_1a8849b2e477cdf62cfca5cf2614256c91" kindref="member">F</ref>(<sp/>X_<sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref><sp/>&lt;<sp/>sizeX;<sp/><ref refid="namespaceMarmot_1_1FastorIndices_1a86d3058ec46954e3842516199edc3a6e" kindref="member">i</ref>++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J(<sp/>i,<sp/>j<sp/>).val<sp/><sp/>=<sp/>derivative&lt;<sp/>1<sp/>&gt;(<sp/>F_right(<sp/>i<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J(<sp/>i,<sp/>j<sp/>).grad<sp/>=<sp/>derivative&lt;<sp/>2<sp/>&gt;(<sp/>F_right(<sp/>i<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed&lt;<sp/>1<sp/>&gt;(<sp/>X_(<sp/>j<sp/>),<sp/>0.0<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F_(<sp/>j<sp/>).val<sp/><sp/>=<sp/>F_right(<sp/>j<sp/>).val.val;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F_(<sp/>j<sp/>).grad<sp/>=<sp/>derivative&lt;<sp/>1<sp/>&gt;(<sp/>F_right(<sp/>j<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>F_,<sp/>J<sp/>};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>AutomaticDifferentiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Marmot</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/src/MarmotAutomaticDifferentiation.cpp"/>
  </compounddef>
</doxygen>

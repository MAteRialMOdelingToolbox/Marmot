<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespace_marmot_1_1_time_integration" kind="namespace" language="C++">
    <compoundname>Marmot::TimeIntegration</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="_newmark_beta_integrator_8h_1acc2ce8e1c2303f444a27d1d36dcd059e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>nDim</declname>
            <defname>nDim</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Marmot::TimeIntegration::newmarkBetaIntegration</definition>
        <argsstring>(const double *du, double *v, double *a, double dT, double newmarkBeta, double newmarkGamma, double *da_ddu)</argsstring>
        <name>newmarkBetaIntegration</name>
        <qualifiedname>Marmot::TimeIntegration::newmarkBetaIntegration</qualifiedname>
        <param>
          <type>const double *</type>
          <declname>du</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dT</declname>
        </param>
        <param>
          <type>double</type>
          <declname>newmarkBeta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>newmarkGamma</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>da_ddu</declname>
        </param>
        <briefdescription>
<para>Newmark-Beta time integration. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements the Newmark-Beta time integration method for linear dynamic problems. It updates the velocity and acceleration vectors based on the displacement increment and the time step. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nDim</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of dimensions (2D or 3D) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>du</parametername>
</parameternamelist>
<parameterdescription>
<para>Displacement increment vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Velocity vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Acceleration vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dT</parametername>
</parameternamelist>
<parameterdescription>
<para>Time step </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newmarkBeta</parametername>
</parameternamelist>
<parameterdescription>
<para>Newmark-Beta parameter (0.25 for linear problems) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newmarkGamma</parametername>
</parameternamelist>
<parameterdescription>
<para>Newmark-Gamma parameter (0.5 for linear problems) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>da_ddu</parametername>
</parameternamelist>
<parameterdescription>
<para>Derivative of acceleration with respect to displacement </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
<simplesect kind="note"><para>The function assumes that the input vectors are of size nDim. </para>
</simplesect>
<simplesect kind="note"><para>The function also assumes that the time step is positive and that the Newmark-Beta parameter is not zero. </para>
</simplesect>
<simplesect kind="note"><para>The function uses a small value (1e-16) to avoid division by zero </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/include/Marmot/NewmarkBetaIntegrator.h" line="52" column="8" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/include/Marmot/NewmarkBetaIntegrator.h" bodystart="52" bodyend="69"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/include/Marmot/NewmarkBetaIntegrator.h" line="31" column="1"/>
  </compounddef>
</doxygen>

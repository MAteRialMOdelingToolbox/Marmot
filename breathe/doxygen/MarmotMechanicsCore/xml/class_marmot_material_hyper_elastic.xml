<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_marmot_material_hyper_elastic" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>MarmotMaterialHyperElastic</compoundname>
    <basecompoundref refid="class_marmot_material_mechanical" prot="public" virt="non-virtual">MarmotMaterialMechanical</basecompoundref>
    <includes refid="_marmot_material_hyper_elastic_8h" local="no">MarmotMaterialHyperElastic.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_marmot_material_hyper_elastic_1a8572da8553b57740895ead92316f4cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarmotMaterialHyperElastic::computeStress</definition>
        <argsstring>(double *S, double *dSdE, const double *FOld, const double *FNew, const double *timeOld, const double dT, double &amp;pNewDT) override</argsstring>
        <name>computeStress</name>
        <qualifiedname>MarmotMaterialHyperElastic::computeStress</qualifiedname>
        <reimplements refid="class_marmot_material_mechanical_1ad41c3e35947773970340d5a315b3e52a">computeStress</reimplements>
        <param>
          <type>double *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dSdE</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>FOld</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>FNew</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>timeOld</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dT</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>pNewDT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a given deformation gradient at the old and the current time, compute the 2nd Piola-Kirchhoff stress and the algorithmic tangent <formula id="203">$\frac{\partial\boldsymbol{S}^{(n+1)}}{\partial\boldsymbol{E}^{(n+1)}}$</formula>.</para>
<para><xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>A default implementation is provided.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd Piola-Kirchhoff stress </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">dSdE</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithmic tangent representing the derivative of the 2nd Piola-Kirchhoff stress tensor with respect to the Green-Lagrange strain tensor <formula id="204">$\boldsymbol{E}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">FOld</parametername>
</parameternamelist>
<parameterdescription>
<para>Deformation gradient at the old (pseudo-)time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">FNew</parametername>
</parameternamelist>
<parameterdescription>
<para>Deformation gradient at the current (pseudo-)time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeOld</parametername>
</parameternamelist>
<parameterdescription>
<para>Old (pseudo-)time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dt</parametername>
</parameternamelist>
<parameterdescription>
<para>(Pseudo-)time increment from the old (pseudo-)time to the current (pseudo-)time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pNewDT</parametername>
</parameternamelist>
<parameterdescription>
<para>Suggestion for a new time increment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/include/Marmot/MarmotMaterialHyperElastic.h" line="73" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_marmot_material_hyper_elastic_1aab2db47ca209a86cfca449e456a1c8ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void MarmotMaterialHyperElastic::computeStressPK2</definition>
        <argsstring>(double *S, double *dSdE, const double *E, const double *timeOld, const double dT, double &amp;pNewDT)=0</argsstring>
        <name>computeStressPK2</name>
        <qualifiedname>MarmotMaterialHyperElastic::computeStressPK2</qualifiedname>
        <param>
          <type>double *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dSdE</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>E</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>timeOld</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dT</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>pNewDT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a given Green-Lagrange strain, compute the 2nd Piola-Kirchhoff stress and the algorithmic tangent <formula id="203">$\frac{\partial\boldsymbol{S}^{(n+1)}}{\partial\boldsymbol{E}^{(n+1)}}$</formula>.</para>
<para><xrefsect id="todo_1_todo000006"><xreftitle>Todo</xreftitle><xrefdescription><para>Should we use function overloading in this case and simple also use computeStress for the function name?</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">S</parametername>
</parameternamelist>
<parameterdescription>
<para>2nd Piola-Kirchhoff stress </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">dSdE</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithmic tangent representing the derivative of the 2nd Piola-Kirchhoff stress tensor with respect to the Green-Lagrange strain tensor <formula id="204">$\boldsymbol{E}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deltaE</parametername>
</parameternamelist>
<parameterdescription>
<para>Green-Lagrange strain increment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeOld</parametername>
</parameternamelist>
<parameterdescription>
<para>Old (pseudo-)time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dt</parametername>
</parameternamelist>
<parameterdescription>
<para>(Pseudo-)time increment from the old (pseudo-)time to the current (pseudo-)time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pNewDT</parametername>
</parameternamelist>
<parameterdescription>
<para>Suggestion for a new time increment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/include/Marmot/MarmotMaterialHyperElastic.h" line="95" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_marmot_material_hyper_elastic_1aa45ef4c7cbd34435e8df58730a5c27dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarmotMaterialHyperElastic::computePlaneStressPK2</definition>
        <argsstring>(double *S2D, double *dSdE2D, const double *E2D, const double *timeOld, const double dT, double &amp;pNewDT)</argsstring>
        <name>computePlaneStressPK2</name>
        <qualifiedname>MarmotMaterialHyperElastic::computePlaneStressPK2</qualifiedname>
        <param>
          <type>double *</type>
          <declname>S2D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dSdE2D</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>E2D</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>timeOld</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dT</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>pNewDT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Plane stress implementation of <ref refid="class_marmot_material_hyper_elastic_1aab2db47ca209a86cfca449e456a1c8ee" kindref="member">computeStressPK2</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/include/Marmot/MarmotMaterialHyperElastic.h" line="105" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_marmot_material_hyper_elastic_1af35c67896d153ce4b22bfc83d15d2f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void MarmotMaterialHyperElastic::computeUniaxialStressPK2</definition>
        <argsstring>(double *S1D, double *dSdE1D, const double *E1D, const double *timeOld, const double dT, double &amp;pNewDT)</argsstring>
        <name>computeUniaxialStressPK2</name>
        <qualifiedname>MarmotMaterialHyperElastic::computeUniaxialStressPK2</qualifiedname>
        <param>
          <type>double *</type>
          <declname>S1D</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dSdE1D</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>E1D</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>timeOld</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dT</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>pNewDT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uniaxial stress implementation of <ref refid="class_marmot_material_hyper_elastic_1aab2db47ca209a86cfca449e456a1c8ee" kindref="member">computeStressPK2</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/include/Marmot/MarmotMaterialHyperElastic.h" line="115" column="16"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Derived abstract base class for <emphasis>simple</emphasis>, purely hyperelastic materials to be used for finite elements based on the total lagrangian kinematic description (TL elements). The second Piola - Kirchhoff stress tensor <formula id="197">$ S $</formula> will be derived by</para>
<para><formula id="198">\[ \displaystyle S = \frac{\partial f(\boldsymbol{E},t )}{\partial \boldsymbol{E}} \]</formula></para>
<para>with the Green - Lagrange strain tensor <formula id="199">$ \boldsymbol{E} $</formula></para>
<para><formula id="200">\[  \displaystyle E  = \frac{1}{2}\,\left(\boldsymbol{F}^T\cdot \boldsymbol{F} - \boldsymbol{I} \right)
\]</formula></para>
<para>as work conjugated measure and the variable <formula id="201">$ \boldsymbol{F} $</formula> denoting the deformation gradient. The algorithmic tangent will be calculated by</para>
<para><formula id="202">\[  \displaystyle \frac{d \boldsymbol{S}}{d \boldsymbol{E}}
\]</formula> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>MarmotMaterial</label>
      </node>
      <node id="1">
        <label>MarmotMaterialHyperElastic</label>
        <link refid="class_marmot_material_hyper_elastic"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>MarmotMaterialMechanical</label>
        <link refid="class_marmot_material_mechanical"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>MarmotMaterial</label>
      </node>
      <node id="1">
        <label>MarmotMaterialHyperElastic</label>
        <link refid="class_marmot_material_hyper_elastic"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>MarmotMaterialMechanical</label>
        <link refid="class_marmot_material_mechanical"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/include/Marmot/MarmotMaterialHyperElastic.h" line="53" column="1" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMechanicsCore/include/Marmot/MarmotMaterialHyperElastic.h" bodystart="53" bodyend="121"/>
    <listofallmembers>
      <member refid="class_marmot_material_mechanical_1adc72d0bff4f72a5eaed2baf11dc02f24" prot="public" virt="virtual"><scope>MarmotMaterialHyperElastic</scope><name>computePlaneStress</name></member>
      <member refid="class_marmot_material_hyper_elastic_1aa45ef4c7cbd34435e8df58730a5c27dd" prot="public" virt="virtual"><scope>MarmotMaterialHyperElastic</scope><name>computePlaneStressPK2</name></member>
      <member refid="class_marmot_material_hyper_elastic_1a8572da8553b57740895ead92316f4cbd" prot="public" virt="virtual"><scope>MarmotMaterialHyperElastic</scope><name>computeStress</name></member>
      <member refid="class_marmot_material_hyper_elastic_1aab2db47ca209a86cfca449e456a1c8ee" prot="public" virt="pure-virtual"><scope>MarmotMaterialHyperElastic</scope><name>computeStressPK2</name></member>
      <member refid="class_marmot_material_mechanical_1a914feb016e64919cee4f1d7ab5029cd8" prot="public" virt="virtual"><scope>MarmotMaterialHyperElastic</scope><name>computeUniaxialStress</name></member>
      <member refid="class_marmot_material_hyper_elastic_1af35c67896d153ce4b22bfc83d15d2f63" prot="public" virt="virtual"><scope>MarmotMaterialHyperElastic</scope><name>computeUniaxialStressPK2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespace_marmot_1_1_continuum_mechanics_1_1_tensor_utility" kind="namespace" language="C++">
    <compoundname>Marmot::ContinuumMechanics::TensorUtility</compoundname>
    <innernamespace refid="namespace_marmot_1_1_continuum_mechanics_1_1_tensor_utility_1_1_index_notation">Marmot::ContinuumMechanics::TensorUtility::IndexNotation</innernamespace>
    <innernamespace refid="namespace_marmot_1_1_continuum_mechanics_1_1_tensor_utility_1_1_tensor_exponential">Marmot::ContinuumMechanics::TensorUtility::TensorExponential</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="_marmot_tensor_8h_1ac76ca261b9626ba6a928136181867c65" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Marmot::ContinuumMechanics::TensorUtility::d</definition>
        <argsstring>(int a, int b)</argsstring>
        <name>d</name>
        <qualifiedname>Marmot::ContinuumMechanics::TensorUtility::d</qualifiedname>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Kronecker delta function <formula id="66">$ \delta_{ab} $</formula>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if a == b, otherwise 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" line="237" column="19" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="_marmot_tensor_8h_1adc57e3526c1cc6da8cf1b38a5126f7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>x</declname>
            <defname>x</defname>
          </param>
          <param>
            <type>int</type>
            <declname>y</declname>
            <defname>y</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if&lt; !std::is_const&lt; std::remove_reference&lt; T &gt; &gt;::value &gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Marmot::ContinuumMechanics::TensorUtility::as</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>as</name>
        <qualifiedname>Marmot::ContinuumMechanics::TensorUtility::as</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Map an object&apos;s raw data as a fixed-size Eigen matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates an <computeroutput>Eigen::Map</computeroutput> view of <computeroutput>t</computeroutput> reinterpreted as an <computeroutput>x</computeroutput>-by-<computeroutput>y</computeroutput> matrix. No data is copied; the map directly references the storage returned by <computeroutput>t.data()</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows (compile-time). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns (compile-time). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Object type, must define <computeroutput>Scalar</computeroutput> and provide <computeroutput>data()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>Eigen::Map&lt;Eigen::Matrix&lt;typename T::Scalar, x, y&gt;&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>Caller must ensure <computeroutput>t.data()</computeroutput> has at least <computeroutput>x*y</computeroutput> elements and matches Eigen’s default (column-major) layout. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" line="261" column="10" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="_marmot_tensor_8h_1aedbc0e8d8b29d1ed3c4969544a3a205c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>x</declname>
            <defname>x</defname>
          </param>
          <param>
            <type>int</type>
            <declname>y</declname>
            <defname>y</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Marmot::ContinuumMechanics::TensorUtility::as</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>as</name>
        <qualifiedname>Marmot::ContinuumMechanics::TensorUtility::as</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Map an object&apos;s raw data as a fixed-size Eigen matrix (const version). </para>
        </briefdescription>
        <detaileddescription>
<para>Creates an <computeroutput>Eigen::Map</computeroutput> view of <computeroutput>t</computeroutput> reinterpreted as an <computeroutput>x</computeroutput>-by-<computeroutput>y</computeroutput> matrix. No data is copied; the map directly references the storage returned by <computeroutput>t.data()</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows (compile-time). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns (compile-time). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Object type, must define <computeroutput>Scalar</computeroutput> and provide <computeroutput>data()</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Input object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>Eigen::Map&lt;Eigen::Matrix&lt;typename T::Scalar, x, y&gt;&gt;</computeroutput>.</para>
</simplesect>
<simplesect kind="note"><para>Caller must ensure <computeroutput>t.data()</computeroutput> has at least <computeroutput>x*y</computeroutput> elements and matches Eigen’s default (column-major) layout.    </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" line="271" column="10" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="_marmot_tensor_8h_1ad4d5c816b765ba019bdb1d1118e2f1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if&lt; !std::is_const&lt; std::remove_reference&lt; Derived &gt; &gt;::value &gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Marmot::ContinuumMechanics::TensorUtility::flatten</definition>
        <argsstring>(Derived &amp;t)</argsstring>
        <name>flatten</name>
        <qualifiedname>Marmot::ContinuumMechanics::TensorUtility::flatten</qualifiedname>
        <param>
          <type>Derived &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Flattens an Eigen object into a 1D column vector map. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates an <computeroutput>Eigen::Map</computeroutput> that reinterprets the data of <computeroutput>t</computeroutput> as a column vector of size <computeroutput>RowsAtCompileTime * ColsAtCompileTime</computeroutput>. No copy is made; modifications through the map affect <computeroutput>t</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>Eigen matrix/array type (non-const). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Eigen object to be flattened. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>Eigen::Map&lt;Eigen::Matrix&lt;Scalar, Rows*Cols, 1&gt;&gt;</computeroutput> referencing the data of <computeroutput>t</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" line="290" column="10" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" bodystart="290" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="_marmot_tensor_8h_1a95e1750e4b9a0f970117a71a7beee21f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Marmot::ContinuumMechanics::TensorUtility::flatten</definition>
        <argsstring>(const Derived &amp;t)</argsstring>
        <name>flatten</name>
        <qualifiedname>Marmot::ContinuumMechanics::TensorUtility::flatten</qualifiedname>
        <param>
          <type>const Derived &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Flattens an Eigen object into a 1D column vector map (const version). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" line="301" column="10" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="_marmot_tensor_8h_1a55c5c241f3e174b5518f25e0310f6f1b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int...</type>
            <declname>Pairs</declname>
            <defname>Pairs</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Marmot::ContinuumMechanics::TensorUtility::contractionDims</definition>
        <argsstring>()</argsstring>
        <name>contractionDims</name>
        <qualifiedname>Marmot::ContinuumMechanics::TensorUtility::contractionDims</qualifiedname>
        <briefdescription>
<para>Build contraction dimension pairs for Eigen tensor operations. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates an <computeroutput>Eigen::array&lt;Eigen::IndexPair&lt;int&gt;, N&gt;</computeroutput> from the compile-time parameter pack <computeroutput>Pairs</computeroutput>, where each consecutive pair defines a contraction index mapping. Evaluated entirely at compile time.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence of integers; must contain an even number of values forming index pairs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array of index pairs usable in Eigen tensor contraction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" line="320" column="20" bodyfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" bodystart="320" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="_marmot_tensor_8h_1a5cf70bc025ba0714a52d5bd0935a6230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d Marmot::ContinuumMechanics::TensorUtility::dyadicProduct</definition>
        <argsstring>(const Eigen::Vector3d &amp;vector1, const Eigen::Vector3d &amp;vector2)</argsstring>
        <name>dyadicProduct</name>
        <qualifiedname>Marmot::ContinuumMechanics::TensorUtility::dyadicProduct</qualifiedname>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>vector2</declname>
        </param>
        <briefdescription>
<para>Compute the dyadic (outer) product of two 3D vectors. </para>
        </briefdescription>
        <detaileddescription>
<para>Forms a 3x3 matrix where each entry is given by <formula id="67">$ a_{ij} = b_i c_j $</formula>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>First 3D vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second 3D vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>3x3 matrix representing the dyadic product. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" line="348" column="21" declfile="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" declline="348" declcolumn="21"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/Marmot/Marmot/modules/core/MarmotMathCore/include/Marmot/MarmotTensor.h" line="233" column="3"/>
  </compounddef>
</doxygen>
